<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>QiaoGao.net</title>
        <description>QiaoGao.net - Qiao Gao</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2014-10-04T19:31:22-05:00</lastBuildDate>
        <pubDate>2014-10-04T19:31:22-05:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>iPhone6美版选购指南</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;版权所有，如需转载请告知原作者并注明原帖地址。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;昨天（9/9/2014），iphone6已经起正式发售。再过两天，iphone6就正式接受预定，国行也基本确定本月内就会发售。很多美国的小伙伴们已经按耐不住，想参加进入第一批订购大军，或者国内亲友也有想要帮忙带买，毕竟iphone6的美版有着更低的价格。那么对于准备把手机拿回国用的小伙伴们，不管你是现在签了合约，以后可能回国还想用的，还是近期就要回国用的，这第一批iphone6到底值不值得买，回国之后又支持哪些运营商呢？这篇文章就是第一时间努力回答这个问题。因为刚刚发售，信息有限，因此未来的情况会有所调整，本文的结论主要来自已获得的资料，包含一些个人的推测。&lt;/p&gt;

&lt;h3&gt;如何选择运营商&lt;/h3&gt;

&lt;p&gt;首先，iphone6的机型选择页面已经上线:&lt;a href=&quot;http://store.apple.com/us/buy-iphone/iphone6&quot;&gt;http://store.apple.com/us/buy-iphone/iphone6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ip6/ip6_1.jpg&quot; alt=&quot;ip6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出iphone6的第一批已经提供全美四大运营商的版本。其中Tmobile为无合约版，其余为合约版。&lt;strong&gt;注意&lt;/strong&gt;:无合约并不意味着就是无锁版，而有合约也并不意味着是有锁版。按照以往各大运营商加锁的情况，At&amp;amp;t和Tmobile有锁但是可解锁，解锁必须满足运营商的解锁条件，符合解锁条件就能得到解锁码通过itunes解锁，但是条件非常一般苛刻。At&amp;amp;t和Tmobile的解锁政策如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tmobile:&lt;a href=&quot;http://support.t-mobile.com/docs/DOC-1588&quot;&gt;http://support.t-mobile.com/docs/DOC-1588&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;At&amp;amp;t:&lt;a href=&quot;http://www.att.com/esupport/article.jsp?sid=KB414532&amp;amp;cv=820#fbid=bSR7tYcfaGZ&quot;&gt;http://www.att.com/esupport/article.jsp?sid=KB414532&amp;amp;cv=820#fbid=bSR7tYcfaGZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;没错，这里的Tmobile无合约版是有锁，仍然需要满足上述条件才能解锁。另外，网上也有提供解锁服务的第三方网站，这里可以自行搜索，但是服务一般是收费的，收费一般在100美元左右，已经没有性价比可言。&lt;/p&gt;

&lt;p&gt;另外，Sprint的版本向来以无法解锁著称，&lt;strong&gt;而Verizon的机型从来无锁&lt;/strong&gt;。没错，这是你唯一可以买到的无锁版本，而且根据以往的经验，Verizon版的网络支持也比At&amp;amp;t和Tmobile要全面（关于网络支持，下文有详细说明）。但是，Verizon版本一定要签两年的合约。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说到这里，对于马上要带回国用的朋友应该已经明白了，第一版的iphone6并不是很好的选择，还是等待无锁版吧。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于要签订合约的小伙伴，对于手机回国期间以及回国之后还能否使用就比较关心了，这里就是网络支持的问题。&lt;/p&gt;

&lt;p&gt;关于iphone6的网络支持，苹果官网也已经给出了信息：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ip6/ip6_2.jpg&quot; alt=&quot;ip6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中，A1549和A1586为iphone6的4.7寸版本。A1522和A1524为iphone6plus。下面是针对国内运营商的逐行翻译（&lt;strong&gt;&lt;em&gt;粗斜体为对应美国运营商&lt;/em&gt;&lt;/strong&gt;）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A1549和A1522（GSM）:（&lt;strong&gt;&lt;em&gt;对应Tmobile（GSM）以及未来Apple官方无锁版&lt;/em&gt;&lt;/strong&gt;）

&lt;ul&gt;
&lt;li&gt;联通3G&lt;/li&gt;
&lt;li&gt;联通2G，移动2G&lt;/li&gt;
&lt;li&gt;联通4G，电信4G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A1549和A1522（CDMA）:（&lt;strong&gt;&lt;em&gt;对应At&amp;amp;t版和Tmobile（CDMA）&lt;/em&gt;&lt;/strong&gt;）

&lt;ul&gt;
&lt;li&gt;电信2G，3G&lt;/li&gt;
&lt;li&gt;联通3G&lt;/li&gt;
&lt;li&gt;联通2G，移动2G&lt;/li&gt;
&lt;li&gt;联通4G，电信4G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A1586和A1524:（&lt;strong&gt;&lt;em&gt;可能对应Sprint和Verizon版&lt;/em&gt;&lt;/strong&gt;）

&lt;ul&gt;
&lt;li&gt;电信2G，3G&lt;/li&gt;
&lt;li&gt;联通3G&lt;/li&gt;
&lt;li&gt;移动3G&lt;/li&gt;
&lt;li&gt;联通2G，移动2G&lt;/li&gt;
&lt;li&gt;联通4G，电信4G&lt;/li&gt;
&lt;li&gt;移动4G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;其中已经确定的是At&amp;amp;t版本，其余为根据以往通常情况的推测，所以具体情况可能会有所变化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结论:&lt;/strong&gt;对于有条件在美国签合约，并且可以满足解锁条件的朋友：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你回国使用的是联通，那么所有的型号都可以选择；&lt;/li&gt;
&lt;li&gt;如果是电信，可以选择At&amp;amp;t和Verizon版本（Sprint不能解锁）；&lt;/li&gt;
&lt;li&gt;如果是移动，只能选择Verizon版本，除非以后完全不用3G和4G。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当然，只有Verizon的版本是不需要解锁的，也就是直接可以插其他运营商的Sim卡，而且不出意外支持国内所有网络。对于考虑签合约的朋友，Verizon的iphone6应该是最好的选择。（&lt;strong&gt;具体情况可能会有变化，购买前请参考上面的翻译的信息，确认版本号为A1586或A1524&lt;/strong&gt;）&lt;/p&gt;

&lt;p&gt;未来，各大运营商一般都会推出无锁无合约版的机型，所以有耐心的朋友可以再等一等。&lt;/p&gt;

&lt;h3&gt;关于港版&lt;/h3&gt;

&lt;p&gt;港版iphone6的官网页面也已经生成：&lt;a href=&quot;http://store.apple.com/hk/buy-iphone/iphone6&quot;&gt;http://store.apple.com/hk/buy-iphone/iphone6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ip6/ip6_3.jpg&quot; alt=&quot;ip6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ip6/ip6_4.jpg&quot; alt=&quot;ip6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;官网目前只提供无锁版的iphone。在官网的信息中，苹果表示该无锁版只支持GSM网络。就此推断港版首批网上预订的无锁版应该只有A1549和A1522（GSM）版本。&lt;/p&gt;

&lt;p&gt;苹果香港官网对无锁版给出的信息：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ip6/ip6_5.jpg&quot; alt=&quot;ip6&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;尾声&lt;/h3&gt;

&lt;p&gt;以上就是我目前对于首批iphone6了解的全部情况，大家可以根据自己的情况考虑要不要第一时间入手。如果还有其他问题，或者发现本文有不正确的地方，欢迎在下方留言。如果觉得本文确实提供了一些帮助的话，就分享给其他可能需要帮助的小伙伴吧！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;本文部分内容参考维基百科，苹果及运营商官网，图片来自互联网。其余为作者个人观点，如有谬误，欢迎指出。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;版权所有，如需转载请告知原作者并注明原帖地址。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/lessons/2014/09/10/iphone6</link>
                <guid>http://username.github.io/lessons/2014/09/10/iphone6</guid>
                <pubDate>2014-09-10T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>火车公交游美西第二站－－波特兰</title>
                <description>&lt;p&gt;波特兰距离西雅图只有四个小时火车车程。在车上匆匆搞定午饭之后，火车就已经停靠在了波特兰。一下车，我们就被波特兰古色古香的车站吸引了。要到达出站口，我们需要自己穿过好几条铁轨，铁轨间是古旧的石砖。车站周身都是鲜艳的红砖，在蓝天下轮廓分明，可以看出即便年代久远，但是一直都有精心保养。这一站下车的人并不多，车站的游客指南被放在不显眼的角落。可以看出这里并不是一座旅游热门城市，但确实一座有风格的小城市。&lt;/p&gt;

&lt;p&gt;波特兰联合车站：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_1.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;市区印象&lt;/h3&gt;

&lt;p&gt;每到一个新的地方，这里的风格就迎面而来，这也是旅行的一种乐趣。从车站出来，走了一个街区就找到了地铁站。说是地铁站，列车既不在地下，也不像轻轨挂在空中，而是和其他的车辆一起跑在马路上。波特兰就是这样一座满城跑火车的城市。走在波特兰的街道上，随处可以见到路边嵌在马路上的铁轨。主干道上是一般的城铁，很长，而比较小的街道上也会跑只有一节或者两节的有轨电车，称为Streetcar。这些火车构成了波特兰独特的风景。&lt;/p&gt;

&lt;p&gt;轨道上的城市：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_2.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;地铁到站了，整整一个街区的路边都是站台：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_3.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在站台上买了一张一周卡，走进火车。咦？哪里刷卡？别说刷卡机了，连个工作人员也没。仔细一看手里的卡，好像也只是一张普通的带防伪的纸片而已。果断找个人问问，那个老大爷投来奇怪的眼神，俨然根本不知道刷卡为何物的样子。原来根本不用刷卡。。。是的，在波特兰的四天，根本没遇到查票的，买票全靠自觉。。。波特兰就是这样一座小城市，街道上行人很少，当然也非常干净明亮。&lt;/p&gt;

&lt;p&gt;跟普通的美国城市相同，居民区大多分布在市中心的四周。所谓市中心，就是河西边的部分。市中心的北部是老城区，建筑和道路都是老式的砖块风格，非常文艺的感觉，老火车站就在这个区域。中部是政府，娱乐，购物区。这里是波特兰最热闹的地方，商场星罗棋布，俨然又是现代化大都市的感觉。来波特兰，一定要购物，因为这里就是传说中的免税天堂。市中心的先锋广场，是一个一天到晚音乐不停的地方。每天，不同的组织都会在这里举行各种娱乐活动，相当热闹。再往南就是市政厅，这里有美国著名的雕塑。城市的南端的一大块地方都是波特兰州立大学的校园，虽然算不上美国著名大学，但是校园依旧古色古香，非常漂亮。我们就住在学校里面的酒店里。&lt;/p&gt;

&lt;p&gt;老城区的旧石板路，当然还有铁轨穿行其间：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_4.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;悠闲的老城区人民：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_5.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;老城区破败的中国城牌匾：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_6.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;波特兰被誉为全美最安全的城市之一，在这里的几天，我们意识到，与之前去过的大城市不同，这里主要以白人为主，很少见到黑人和亚洲人。不得不承认，在美国，黑人区和中国城周边都是犯罪率很高的地方，而这里犯罪率低，想必也与之不无关系。&lt;/p&gt;

&lt;p&gt;现代化的市中心：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_7.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;喜欢遛狗的人特别多：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_8.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;波特兰大楼。上面是波特兰迪亚女神像，是仅次于自由女神像的全美第二大锻铜雕像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_9.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;美丽的波特兰州立大学校园：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_10.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_11.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;市区文化——雕塑&lt;/h3&gt;

&lt;p&gt;除了波特兰大楼的铜像，在波特兰的大街小巷，都能发现颇有特色的雕塑，以及一些奇怪的小装置。&lt;/p&gt;

&lt;p&gt;波特兰随处可见的喝水的小装置。与美国传统的路边喝水装置不同，这种装置不但是常年流水的，而且分布非常密集，基本上当你口渴的时候就能找到。所以到了波特兰，把水壶扔在家吧！不仅如此，这种像小喷泉一样的东西还非常美观，可以作为波特兰的城市符号之一。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_12.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说到雕塑，其实美国城市多多少少都会有一些，但唯独波特兰的最为精致：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_13.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;路边还有随处可见的小动物：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_14.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_15.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_16.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然还有不少抽象风格的作品：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_17.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_18.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_19.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;市区文化——先锋法院广场&lt;/h3&gt;

&lt;p&gt;先锋法院广场，其实就是先锋法院门口的广场。广场不大，甚至赶不上国内三线城市的市民广场。但是这里却是波特兰著名的文化中心，每天这里都会举行各式各样的活动。如果来了波特兰，一定要每天都来看看，保证是不一样的风景。&lt;/p&gt;

&lt;p&gt;我们刚到的第一天，步行就几乎把市区转了个遍。这天正好是周五，广场举办的活动是意大利文化节。除了全天提供意大利的美食，还有意大利风格的音乐演奏。然而这只是真正活动的预热。在市区吃过晚饭，再来到广场，这里已经high到爆棚了。舞台上是热情似火，动感十足的意大利音乐会。舞台下，男女老少都毫无顾忌的挑起了舞。可惜作为中国人的俺不会跳舞，只能在旁边看，不过也会忍不住跟着音乐击掌。&lt;/p&gt;

&lt;p&gt;热闹的意大利文化节：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_20.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;意大利文化节整整持续了三天，到了周一，我们再来看，这里已经完全变成了另一番景象。&lt;/p&gt;

&lt;p&gt;芭蕾舞学校将芭蕾舞课程搬到了广场舞台上，音乐清新流畅，整个气氛都变得淡雅起来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_21.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;广场的周围变成了菜市场。可以看到大大小小布局精致的摊铺。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_22.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;仔细看才发现原来这就是个煎饼摊：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_23.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;广场旁边还有一个令人抓狂的路标。不要指望这个路标能真的指明道路。仔细看看，上面指明了全世界的很多著名地点到波特兰的距离，连万里长城都在其中。当然还有波特兰本地的地标，这些是真的有用的路标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_24.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;广场对面就是庄严的先锋法院了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_25.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;购物&lt;/h3&gt;

&lt;p&gt;俄勒冈州是美国少有的免税州，这里的一切都自带九折优惠。没错，所有的东西。在这里买一台苹果电脑要比美国其他地方便宜一百多美元。市中心先锋广场附近聚集了大大小小各种商店和购物中心。除了全美著名的Macy&#39;s和Nordstrom，波特兰本地的先锋卖场其实是更好的去处：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_26.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;波特兰作为耐克的故乡，市中心像北京王府井Nike旗舰店那样规模的店就有好几家：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_27.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;波特兰市中心的苹果店和微软店：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_28.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_29.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在波特兰市中心还有一家叫Camera World的相机专卖店，这里不但可以买到各类相机和配件，也提供镜头租赁服务。这里的相机甚至比亚马逊还要便宜，店员也非常热情，让我忍不住在这里买了新相机。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_30.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_31.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;密林之中&lt;/h3&gt;

&lt;p&gt;波特兰作为俄勒冈州的首府，自然也是群山密林环绕。这里是电影《暮光之城》的取景地，周围的树林也全部都是高不见顶的针叶林。城市西边紧靠着城市的华盛顿森林公园，就是像电影中那样美丽的地方。与先锋广场的小气不同，波特兰人民可是有一个碉堡了的市民公园。整个公园就是一座山，山路小道错综复杂，其间点缀着波特兰动物园，玫瑰种植园和全美最著名的日本园林。每天，这里都会迎来大量的登山露营者，没有GPS真的会迷路的哦。&lt;/p&gt;

&lt;p&gt;丛林中的俄勒冈动物园：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_32.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;动物园的动物们：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_33.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_34.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_35.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_36.jpg&quot; alt=&quot;por&quot; /&gt;
&lt;img src=&quot;/images/travel/por_37.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从动物园出来，要到达玫瑰种植园还有相当远的路。由于拍照分神，我们错过了半小时一趟的公园巴士，没办法，只能硬着头皮走了。按照地图的指示，我们在密林中走了几英里的山路，路上除了偶尔经过的汽车，只能听到自己的呼吸和脚步声。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_38.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;路边的风景：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_39.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;树到底有多高，对比一下就知道了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_40.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有点理解为什么日本人要在这里建造园林。在这样的地方走一走，心灵的确能受到净化。&lt;/p&gt;

&lt;p&gt;也不知道走了多久，到了尽头就到了日本园林。日本园林向来以细节精致著称，连地上的苔藓都是精心护理。园内很多元素都跟中式园林相似，假山，木桥，鲤鱼，论设计和规模其实都不如中式园林，但是老外们却是满眼新奇。实际上，在美国的各大城市都有日本园林，在西方世界也颇受欢迎。可惜我们却没能把我们的文化很好的向外发扬，归根结底我们断了根基，对自己的文化失去了自信。&lt;/p&gt;

&lt;p&gt;波特兰日本园林：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_41.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_42.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_43.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;走出日本园林，就是著名的波特兰玫瑰种植园。波特兰也被称为玫瑰之都。因其气候非常适合种植玫瑰，因而一直是美国玫瑰的主产区之一。如果说玫瑰是浪漫的象征，那么这里也许就是最浪漫的地方。数不清的的各色玫瑰分布在玫瑰园之中。整个花园都是花香扑鼻，真的是名副其实的“花”园。&lt;/p&gt;

&lt;p&gt;玫瑰园的入口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_44.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;玫瑰的世界：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_45.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/por_46.jpg&quot; alt=&quot;por&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;尾声&lt;/h3&gt;

&lt;p&gt;总之，波特兰就是这样一座悠闲的城市。在波特兰的几天，可以说是整个旅途中最舒服的几天。安静的环境，友善的人们，都在无形之中安抚着我们旅行中的劳顿。当我们最后到达车站，说实话，真有些舍不得这座城市。波特兰，美丽的小城，再会。&lt;/p&gt;
</description>
                <link>http://username.github.io/travel/2014/09/03/portland</link>
                <guid>http://username.github.io/travel/2014/09/03/portland</guid>
                <pubDate>2014-09-03T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>火车公交游美西第一站－－西雅图（2）</title>
                <description>&lt;p&gt;刚到西雅图，便立刻感觉到这里与芝加哥的不同。即使是夏季正午灼热的阳光下，这座城市也依然是金黄色的色调。街上随处可见打扮时髦的路人，可以说再高的逼格也会埋没在茫茫人海之中。给我印象更深的是，这是个文艺青年遍地的城市，公交上总有几个抱着书慢慢读的乘客，抱着鲜花的路人也非常常见。由于城市建在山的上坡面，从城市的任何路口都可以看见远处的海湾。总之这是一个有点浪漫主义色彩的城市。与芝加哥老旧，沉稳的风格相比，这里的艺术氛围更加开放，有活力。骚黄色的Nokia Lumia 1520也可以拿出来放心大胆的用了。。。&lt;/p&gt;

&lt;p&gt;说到西雅图，人们的第一印象就是太空针，不得不说的还有繁华的派克市场。&lt;/p&gt;

&lt;h3&gt;太空针&lt;/h3&gt;

&lt;p&gt;由于住的旅馆就在太空针旁边，所以每天都会在太空针周边的公园转上几圈。当然也少不了登上太空针，一睹这座城市的风采。&lt;/p&gt;

&lt;p&gt;太空针第一眼：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_1.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Citypass包含两次登上太空针的门票。第二天晚上，我们选择在人不多的时候登上太空针。&lt;/p&gt;

&lt;p&gt;鸟瞰西雅图夜景：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_2.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了一览西雅图的全景，太空针还提供一些可供娱乐的设备。比如可以操控的摄像机，触摸照片墙，动态街景等。&lt;/p&gt;

&lt;p&gt;可以触摸的照片墙，记录着西雅图这座城市的历史：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_3.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，白天的太空针也是很壮观的。周边的公园是休息的好去处。&lt;/p&gt;

&lt;p&gt;以美国作家August Wilson命名的公园小道。图为路口的石门：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_4.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公园里不乏拍摄的好角度：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_5.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公园里有一个球形的大喷泉，夏天很多人在这里纳凉。太阳直射下喷泉周围显现出漂亮的彩虹：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_6.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;太空针自从西雅图世博会建成以来，已经成为西雅图最具代表性的建筑。然而要真正玩好西雅图，派克市场才是正题。&lt;/p&gt;

&lt;h3&gt;派克市场及周边码头&lt;/h3&gt;

&lt;p&gt;派克市场坐落在繁华的西雅图市中心，是一家拥有百年历史的海鲜市场。现在的派克市场更像一个旅游景点，每天游客来来往往，卖的东西也是千奇百怪，应有尽有。在这里，古旧的建筑和新时代艺术相互交融，迸发出强烈的色彩。市场周边的码头也是很好的去处。55，56码头的游船，57，58码头的美食和摩天轮，59号码头的水族馆，60号码头的大广场，都是不错的观光景点。&lt;/p&gt;

&lt;p&gt;第一天一早起床，目标派克市场。&lt;/p&gt;

&lt;p&gt;早安，西雅图！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_7.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公交车坐到派克市场站，走过一段长长的斜坡，远远就看到海湾环抱的派克市场：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_8.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;早晨和煦的阳光显得格外温柔：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_9.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;阳光洒在几乎空无一人的街道上，看来我们来早了，大部分店都没有开门。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_10.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先去周边逛一逛吧。不知不觉间逛到60号码头。这里是一个纯木质的码头，宽阔，平坦，而且空无一物。早上也没什么人影，是个散步的的好去处。&lt;/p&gt;

&lt;p&gt;60号码头，阳光下的西雅图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_11.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;固定码头的木桩也十分老旧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_12.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;海鸟飞过，抓拍：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_13.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;走出60号码头，发现59号码头的水族馆也开门了。水族馆的门票也包含在citypass里面。一进门，可以看到潜水员在在给大家讲课。没错，真的是潜水员在讲。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_14.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么美国的小孩子总有问不完的问题。再往里面走，有可以摸的海胆，海葵，还有恐怖的章鱼哥。最后还有一场精彩的海豹表演。没怎么拍，这里就不上图了。&lt;/p&gt;

&lt;p&gt;出来就中午了，去派克市场觅食，突然发现原本没人的街道已经被挤得水泄不通。沿街的饭店好像都在排队。其中有一家的队格外长，走近一看原来只是一家星巴克。。。这些人难道没有见过星巴克么？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_15.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上网查了下，原来这就是传说中的星巴克1号店！顿时尿了一地有木有。在下真是有眼不识泰山，大早上从这里过了n次都没看上一眼。（不要吐槽连这都不知道就来玩，这样玩才带感！）早就听说只有这里可以买到星巴克一号店的纪念杯，原来这些人都在排队买杯子！看了看长龙算了，改天再来。顺便吐槽一下门口这个唱歌的唱的真的很烂。。。&lt;/p&gt;

&lt;p&gt;走进市场深处，人潮迎面涌来。再看看里面，各种店铺生意都非常红火。外面对街的店铺以花店为主，也有各种手工工艺品出售。&lt;/p&gt;

&lt;p&gt;人潮拥挤的派克市场：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_16.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;派克市场标志性的海鲜店：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_17.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;各色物品出售：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_18.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_19.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_20.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_21.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_22.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_23.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;走进市场深处，又是另一番天地。里面大概有三层，主要以各种各样的工艺品为主，当然还有很多很有特色的店铺。让人忍不住挨个逛个遍。&lt;/p&gt;

&lt;p&gt;派克市场的旧书店。图为川端康成《千羽鹤》的英文译本。泛黄的书页充满的文艺的感觉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_24.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一家专门贩卖各种旧杂志，旧书信的小店。来到这里实在抑制不住买东西的心情。淘了三本上世纪三十年代的国家地理杂志，以及一本上世纪六十年代的电子产品杂志。&lt;/p&gt;

&lt;p&gt;旧杂志店的各种商品，连破纸片也有卖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_25.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_26.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_27.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;淘到的杂志：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_28.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个店的对面就是一家魔术产品店，整个店散发着一种有点诡异的气氛：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_29.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说到旧货当然也少不了旧黑胶唱片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_30.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;走到深处，竟然连二次元宅男的店都有：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_31.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_32.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一幅图告诉你手伴和普通儿童玩具的区别：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_33.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;果断在这里淘到了几张不错的海报。果断买买买买买。&lt;/p&gt;

&lt;p&gt;逛累了还可以出来买点零食。买了点蜂窝，甜的要死。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_34.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，派克市场的店铺远不止这些，每家店都有考究的装潢，即使只是在外面转也会给人赏心悦目的感觉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_35.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_36.jpg&quot; alt=&quot;sea&quot; /&gt;
&lt;img src=&quot;/images/travel/sea2_37.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了令郎满目的店铺，派克市场还有一个很特别的景点，那就是位于Post Aly的口香糖之墙。在看到这个令人匪夷所思的地方之前，我从来没听说，也从来没有想象过世界上竟有这样的地方。1993年，一群年轻人在此排队等候市场剧院的演出，有人无意将一些小物件用口香糖粘在墙上，在场等待的人纷纷效仿。二十年间，不断有人把口香糖粘在这堵墙上，到现在已经积攒了超过百万人次的唾液。。。最深处厚达数英寸。因此这里也被评为世界上最为恶心的旅游景点之一（个人认为没有之一！）。但是对于初来乍到，没有做任何功课的人来说，走到这里对我的震撼可想而知。远远就闻到一股口香糖腐烂的臭味，走近看更是苍蝇横飞，连鞋底都是粘的。虽然如此，目之所及，只能用壮观来形容。阳光斜照在涂满五颜六色口香糖的街道上，墙上满是涂鸦和星星点点的口香糖。阳光直晒处就是传说中的重灾区，一坨坨的口香糖在炙烤下慢慢融化，一层又一层，根本看不到墙本来的颜色。这里每天游人如织，依然不断的有小孩和情侣吧口香糖往墙上粘，边粘边自豪的拍照。所有走到这里的人都未免露出笑颜，再大的烦恼也能一扫而空。与传统的艺术形式不同，这里宣泄着年轻人永远绚烂的色彩，代表积极向上心态的现代艺术。&lt;/p&gt;

&lt;p&gt;口香糖涂鸦墙：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_38.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;能粘的地方都不放过：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_39.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最厚的地方：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_40.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;细节。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_41.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很恶心，但是有种夸张的美感。&lt;/p&gt;

&lt;p&gt;走出派克市场，就到了57号码头。这里有西雅图著名的摩天轮和旋转木马。还有数家口碑不错的餐厅。&lt;/p&gt;

&lt;p&gt;57号码头的旋转木马，有一种梦幻的感觉。果断来一张韦斯安德森风格的构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_42.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;著名的摩天轮，不过没有上去坐：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_43.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就在57码头旁边，55，56号码头是游船的出发地，在这里买票上船，可以一览西雅图及周边的风景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea2_44.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;船上的解说员非常幽默风趣，经常与船上的人互动。解说的内容从西雅图的历史，城市建筑，到周边岛屿，港口无所不包。一边欣赏城市的全景，一边了解城市的历史，一边吹着海风，非常惬意。&lt;/p&gt;

&lt;p&gt;其实两天里我们在派克市场一共转了三次，才终于看完了几乎所有的店铺，买到了星巴克的杯子，吃了几家市场里的餐馆，看到了这里的早晨，黄昏和黑夜。这就是这次出游的宗旨，好玩的地方，一定要尽兴，比起在景点前照相，证明自己来过，来满足自己的虚荣心。我认为更重要的是尽可能的感受一个地方的氛围，体会当地人的生活状态，与自己熟悉的地方有哪里不同，从而在开阔眼界的同时，开阔自己的心胸。&lt;/p&gt;
</description>
                <link>http://username.github.io/travel/2014/08/24/seattle_2</link>
                <guid>http://username.github.io/travel/2014/08/24/seattle_2</guid>
                <pubDate>2014-08-24T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>火车公交游美西第一站－－西雅图（1）</title>
                <description>&lt;p&gt;看过关口知宏坐火车游中国的纪录片，一直对坐火车出游有所向往，不过最近才终于下定决心出行。前期的准备相当麻烦，各地的功课也基本上一点没做，所以基本就是随便走走的状态，也肯定会错过很多著名的去处。不过没关系，这次的宗旨是玩得开心，只要是好玩的地方就要玩的尽兴。&lt;/p&gt;

&lt;p&gt;2014年8月18日&lt;/p&gt;

&lt;p&gt;一早从芝加哥出发，总之行李就是一个包：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_1.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中午12点，飞机抵达西雅图。竟然神奇的提前一个小时到达。然后找公交站，买卡，各种晕之后总算找到车站。先不急着去旅馆，大好的时间怎么能浪费。按计划先去在机场和市区中间的西雅图飞行博物馆。&lt;/p&gt;

&lt;p&gt;飞行博物馆到了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_2.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和著名的空中堡垒合个影：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_3.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进来后才发现这里可以买Citypass，原来这里也算西雅图的著名景点之一。买过票就可以进入主厅参观了。&lt;/p&gt;

&lt;p&gt;主厅的黑鸟战斗机，超级霸气：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_4.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里可以看到各个时代，各种设计的飞机，有些是模型，不过有些是真家伙，比如这架黑鸟。你甚至可以到座舱里面体验一把黑鸟战机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_5.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;J58发动机近乎疯狂的工业设计：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_6.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了主厅，旁边的一战二战展厅也很抓人眼球，这个展厅完全依靠个人捐赠，基本集齐了世界大战期间的主战机型。&lt;/p&gt;

&lt;p&gt;进门拐角就看到一架上面印有中文的战斗机，原来这就是当年援助了多个国家的机型，唐纳德的飞虎队的战斗机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_7.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然也少不了死对头，日本零式战机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_8.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从天桥过去，另一侧还有一个航天馆。虽然看上去很高端，实际上只是模型啦，里面也只展出了一些照片文字而已：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_9.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实西雅图飞行博物馆还有很多其他的内容，飞机的种类不计其数，这里因为篇幅的关系只选了一些有代表性的来介绍。因为背着所有的行李，转了几个小时，离开的时候已经精疲力尽。&lt;/p&gt;

&lt;p&gt;博物馆门口是华盛顿州著名宇航员－－迈克尔安德森的雕塑，他在2003年的事故中牺牲：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travel/sea_10.jpg&quot; alt=&quot;sea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;雕塑下面写着一行字：Keep your dreams alive！&lt;/p&gt;

&lt;p&gt;人类飞上天际，这本身就是梦想的奇迹。&lt;/p&gt;
</description>
                <link>http://username.github.io/travel/2014/08/21/seattle</link>
                <guid>http://username.github.io/travel/2014/08/21/seattle</guid>
                <pubDate>2014-08-21T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>从历代《最终幻想》看游戏世代进化史</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;版权所有，如需转载请告知原作者并注明原帖地址。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
&lt;audio controls autoplay loop&gt;
    // MP3 file (Chrome/Safari/IE9)
    &lt;source src=&quot;/music/12 Where Love Doesn&#39;t Reach.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
    // Ogg Vorbis (Firefox)
    &lt;source src=&quot;/music/12 Where Love Doesn&#39;t Reach.ogg&quot; type=&quot;audio/ogg&quot; /&gt;
&lt;/audio&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;(BGM: Where Love Doesn&#39;t Reach - 最终幻想IX，亚历山大摧毁后的BGM钢琴版)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;前言&lt;/h3&gt;

&lt;p&gt;最终幻想系列，作为全世界最畅销的游戏系列之一，到目前为止已经推出了十四部正篇游戏，而且Square Enix已确定将在PS4平台发售发售最终幻想的第十五部作品。纵观整个系列，游戏横跨历代主流游戏平台，诉说着电子游戏世代演化的历史。在E3 2013的演示视频中，最终幻想15惊艳全场，颠覆了人们对于游戏画面的普遍认知。然而这绝不是最终幻想系列第一次做到这些，在挖掘游戏主机潜能，丰富游戏内容方面，最终幻想系列始终走在时代的最前列。这篇文章，旨在通过介绍最终幻想系列，来一窥近几十年游戏界，乃至科技界的发展历程。（本文不会涵盖系列所有作品，只会有选择性地介绍）&lt;/p&gt;

&lt;h3&gt;一、家庭娱乐的黎明－－FC时代&lt;/h3&gt;

&lt;p&gt;1983年由任天堂发布的FC（Family Computer）游戏主机无疑创造了一个时代，从此游戏主机走进了千家万户的客厅，带来了无数欢笑，直到今天。FC国人称为红白机，还有一些盗版的版本，如“小霸王学习机”，欧美统称NES（Nintendo Entertainment System）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_1.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这款主机搭配了当时流行的MOS科技的6502中央处理器，主频1.78MHz，并使用理光开发的图形处理器，带有2KB显存，背景解析分辨率为256x240，并最多支持同屏64个可运动角色（sprites）。在只读存储器作为游戏媒介的年代，sprite被大量使用，人物的形象和动作固化为简单的图形和若干帧动画。这个配置现在看起来只能是弱爆了，但这确确实实就是伴随我们童年的红白机。6502这块芯片，因其高速，廉价而闻名，苹果的Apple II就使用了这块芯片。可以说，这就是那个年代的主流芯片，就像现在的intel。&lt;/p&gt;

&lt;p&gt;MOS 6502处理器：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_2.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FC平台上有最终幻想系列的前三部，其中第一部1987年发售，游戏使用侧视战斗视角，加入战斗动画。游戏第一作获得了一定程度的成功，但是这时候最终幻想的设定，风格还没有成型，所谓成功也与当时FC主流游戏的流行程度相去甚远。&lt;/p&gt;

&lt;p&gt;最终幻想I：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_3.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随后的二代和三代在画面上并没有突破，毕竟在同样的平台下。因为条件所限，人们只能在游戏性方面作文章。二代引入了大量新的系统和玩法，同时丰富了NPC的的对话内容。到了第三代，游戏已经有了比较完备的系统，首次使用职业转换系统，设定也渐渐趋于稳定。更丰富的游戏内容意味着更大的游戏容量，最终幻想3的大小已经达到了游戏卡带的极限（4Mbit＋64k），完全沾干了fc所有的机能。&lt;/p&gt;

&lt;p&gt;最终幻想III：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_4.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;二、FC加强版－－SFC时代&lt;/h3&gt;

&lt;p&gt;每次主机的换代都是一次飞越。1990年，任天堂发布了SFC（Super Famicom），俗称超任。这个在今天任何移动设备都可以模拟的平台，在当时却有着绝对超前的设计。任天堂甚至为它设计了光枪（Nintendo Scope），以及通过卫星的远程游戏下载功能（Satellaview）！机身采用全面提升的配置，但是在基本架构方面并没有有太大的改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_5.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SFC采用的CPU是16bit的65c816，是6502的改进型。主频提升的同时，进一步加强了声音和图像性能。超任拥有一个使用独立cpu的音频处理模块，同时使用两个定制的图像处理器，解析分辨率512x448，支持16bit颜色，甚至支持一些简单的3D效果。这个进步在当时是非常明显的。更加生动艳丽的图像，更接近真实的音效，在那个PC图形界面还没有普及的年代，这些毫无疑问都是极致的享受。然而，由于任天堂设计过于激进，以及定价较高，超任并没有获得FC同等的成功。&lt;/p&gt;

&lt;p&gt;超级任天堂的主板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_6.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SFC平台同样有三部最终幻想作品：最终幻想4、5、6。由于SFC更强大的机能，Square在游戏中加入了更复杂的系统，和更精美的画面。从最终幻想IV开始，游戏引入ATB（即时战斗系统），一直延续到第九代。新的系统增加了游戏的紧张感，提升玩家的参与度。强大的机能带来艳丽的颜色的同时，也带来了更流畅的物体运动，更华丽多变的战斗场景，当然还有优秀的音效。从此，美妙的音乐也成为了最终幻想系列的象征。最终幻想4代于1991年发行，因其感人的剧情和动听的音乐，还有新的战斗系统，而被业界认为是RPG里程碑式的一作。&lt;/p&gt;

&lt;p&gt;最终幻想IV:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_7.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了最终幻想6代，游戏开发者对于开发平台逐渐熟悉，因而能够吧更多重点放在系统的优化和剧情的编排上。除了一贯的优质画面和音乐外，整部作品剧情更加紧凑，环环相扣，最终使这部作品成为2D游戏史乃至整个游戏史上不可多得的艺术精品。该作被Gamesradar评为最佳最终幻想游戏，同时2012年，改作被IGN评为“最佳100RPG”首位。到此为止，最终幻想已经奠定了其RPG游戏王者的地位。&lt;/p&gt;

&lt;p&gt;最终幻想VI：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_8.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;三、迎来3D－－Playstation时代&lt;/h3&gt;

&lt;p&gt;1994年，各大游戏厂商纷纷尝试研发3D游戏主机，随之而来的是一场惨烈的竞争。与此同时，拥有更大容量的CD-ROM作为一种新的媒介进入了大众的视野。一切的开始只是SONY为任天堂下一代主机开发CD—ROM读取设备的合作协议。但是SONY对于游戏主机市场早就觊觎已久，这次的合作SONY意在以此为契机进入游戏机市场。任天堂在产品快要发布时才发现合同的问题，于是犯了一个更大的错误————与SONY闹翻。于是我们看到任天堂的下一代主机依然使用了容量有限的卡带，而索尼也迫于无奈自己开发主机，这就是Playstation。就是这款主机，开启了索尼王朝的同时，将任天堂逐步逼向绝境，更是开启了世嘉逐渐衰落，甚至最终退出主机市场的序幕。&lt;/p&gt;

&lt;p&gt;Playstation主机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_9.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Playstation搭配了MIPS R3000A 32位RISC处理器，采用硅谷图形（SGI）的影像技术。GPU第一次加入了3D渲染流水线，同时也大幅提升了2D性能，不仅使游戏支持3D人物及少量3D场景，而且也使在游戏中加入电影级别的CG动画成为可能。这块核心的渲染分辨率为256x224至640x480，达到了当时民用显示器的极限，色彩也提升到现在主流的24位色。除此之外，音频也有了巨大的提升，支持24bit，44.1kHz采样率，玩家第一次在电视游戏里体验到了CD的音质。对比上一代主机的配置，不难看出，Playstation无论从画质，音效，甚至是手柄控制方式（一直延续到PS3代的手柄经典设计，也被后续的其他主流游戏机厂商效仿），在当时都是革命性的，已经接近了现代游戏机的水准。&lt;/p&gt;

&lt;p&gt;Playstation主板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_10.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了Playstation平台，最终幻想系列也迎来了真正的黄金时代。究竟是最终幻想成就了PS，还是PS成就了最终幻想，这很难说。唯一肯定的是，二者相辅相成，创造了前所未有的游戏体验。最终幻想在PS平台上有三部作品－－7，8，9。其中第七代的评价最高，全球销量950万，并成为GameFAQs 2004和2005年读者票选的“史上最佳游戏”。即便如此，PS平台的三部作品其实是旗鼓相当的，都有着非常高的素质，而且各有特色。&lt;/p&gt;

&lt;p&gt;最终幻想VII：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_11.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个现在看起来有点可笑的场景对于当时的人们来说可谓惊艳。告别了像素图人物的同时，迎来了更大，更精美，更真实的2D场景。Square还在这款游戏中加入了精美的CG动画和震撼的音效。从这一作，以及最终幻想6的PS重制版开始，由Square的Visual Works工作室打造的华丽细腻的CG动画，也一直伴随最终幻想，成为系列的象征之一。&lt;/p&gt;

&lt;p&gt;Visual Works的CG画面（最终幻想7、8、9）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_12.jpg&quot; alt=&quot;ffc&quot; /&gt;
&lt;img src=&quot;/images/ffc/ffc_13.jpg&quot; alt=&quot;ffc&quot; /&gt;
&lt;img src=&quot;/images/ffc/ffc_14.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然最终幻想VII取得了巨大的成功，但是从建模的水平不难看出，此时Square在3D游戏制作方面还是相当稚嫩的，另一个原因是第七代本来原定在任天堂主机发布，因此并没有针对平台做充分的优化。到了最终幻想8，Square在PS平台上“3D人物建模，2D背景”的RPG模式已经炉火纯青，并加入了之后被长期沿用的3D大地图，系统上面也更加丰富，更注重玩家的参与性（吸收系统，扳机系统）。而在最终幻想9，更加电影化的叙事手法被加入了进去（多场景演示）。除此之外，PS时期的最终幻想，在多变的叙事风格下，保持了一贯高水准的剧本，以及美妙的音乐，在系列中都属突出的佳作。&lt;/p&gt;

&lt;p&gt;最终幻想IX：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_15.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;四、全3D的革命－－Playstation 2时代&lt;/h3&gt;

&lt;p&gt;一款极为成功的科技产品在给一个公司带来巨大利润的同时，也为公司未来的发展增加了很多压力。PS2就是这样一款主机。PS2从2000年发售到2012年停产为止，累计销售了超过1亿5000台，是历史上销售时间最长，游戏最多的游戏机。每次索尼游戏机的升级，几乎都伴随着光盘技术的升级。这一次索尼使用了容量高达8.5G的DVD-ROM。在那个主流PC游戏还挣扎在几百MB的年代，PS2迅速横扫了当时市面上所有的游戏主机。后期的薄板因其廉价，轻薄，又兼具播放器功能的特点，再次在第三世界国家掀起了购买热潮。直到今天（2014/8/17），索尼仍然保持着对PS2的技术支持。&lt;/p&gt;

&lt;p&gt;Playstation 2主机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_16.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;索尼在PS2上面使用了前所未有的复杂结构，并没有使用现在主流的可编程着色器。CPU是由索尼与东芝共同研发的Emotion Engine处理器，使用了128bits MIPS RSIC架构。浮点运算达到6.2GFLOPS。片上包括一个CPU核心，两个向量处理单元（VPU），一个图形接口（GIF），一个10通道的DMA单元，一个内存控制器，一个图像处理单元（IPU）和一个输入输出接口。这块芯片其实加大了游戏的开发难度，更让民间的模拟器开发步履艰难。不仅如此，PS2的渲染工作还使用了一块独立GPU－－Graphics Synthesizer（GS）。音效方面PS2加入了杜比DTS音效支持。主机配置几乎完美，外观的工业设计也极富有未来感。&lt;/p&gt;

&lt;p&gt;Playstation 2主板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_17.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS2时代也有三部口碑不错的正传作品－－10，11，12。最终幻想X作为PS2的首发游戏之一，取得了迅速的成功，全球销售约500万份，是销售最快的最终幻想系列。利用了PS2在多边形，光影方面的优化，最终幻想使用了更精细的角色建模，几乎与CG相差无几。巨大的游戏容量也使在游戏中加入全人物配音成为可能。从那时开始，当代游戏机的基调就基本被确认，个人认为直到现在并没有本质的提升，只是细节不断被强化。最终幻想XI首次采用了网络合作的游戏模式，游戏同时也在具有原生网络支持的XBOX平台发布（早期的PS2并没有网络支持），直到现在依然拥有大量活动用户，2013年推出了最后的资料片－－“雅特林的魔境”，被誉为PS2的收山之作。&lt;/p&gt;

&lt;p&gt;最终幻想X游戏画面和CG：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_18.jpg&quot; alt=&quot;ffc&quot; /&gt;
&lt;img src=&quot;/images/ffc/ffc_19.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于开发的初期对于平台的不熟悉，最终幻想X并没有完全使用PS2的机能，游戏中的也穿插了很多PS1中常见的2D场景，3D场景也使用固定视角。即便如此，游戏明丽的画面给人带来的震撼还是巨大的。游戏的CG在今天看来仍然动人心魄。在最终幻想XI中，游戏第一次使用了可调视角的3D场景，这种方式也一直延续至第12代。于2006年发售的最终幻想XII较前作并没有使用更多的多边形，反而使用了更复杂的贴图纹理，游戏画面的发展趋势已然显现。最终幻想XII回归初期的主题，游戏内容庞大，第一次采用了随机战斗系统。虽然新的系统诟病颇多，但是高水准的剧情依然为这一部带来了不错的评价。&lt;/p&gt;

&lt;p&gt;最终幻想XII游戏画面和CG：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_20.jpg&quot; alt=&quot;ffc&quot; /&gt;
&lt;img src=&quot;/images/ffc/ffc_21.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;五、光与影的幻觉－－PS3与Xbox 360时代&lt;/h3&gt;

&lt;p&gt;由于Sony在PS3蓝光光盘上出现的问题，PS3不得不相对Xbox360晚一年发布。2006年11月，PS3才终于发售，但此时xbox已经疯狂卖出800万份。Sony游戏业务亏损的噩梦就此开始。其实早在xbox初代发布时，因为其采用了可编程着色器，以及x86的架构，使得开发更容易，因而大受好评。在射击游戏领域，微软也创出了自己的一片天地。到了PS3，索尼依然倔强的使用复杂的结构，采用128位PPC架构，提高了成本和开发难度，再加上在体感技术方面完全落后了老对手任天堂和微软，尽管在蓝光技术方面遥遥领先，依然有大批开发者离开索尼平台。索尼的骄傲在这时已然成为历史。但是要说最终幻想，PS3已然是最佳的体验机型，所以这里还讲PS3。尽管前期落后明显，索尼在后期努力缩减机器成本，同时旗下的工作室也开发出了很多满分大作，渐渐PS3也走出了自己独特的道路。2013年，PS3的销量已经反超Xbox360，索尼在逆境下依然取得了不错的成绩。&lt;/p&gt;

&lt;p&gt;Playstation 3主机：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_22.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;硬件方面，PS3采用了由SCE，东芝，IBM开发的基于Power RSIC架构的Cell处理器。由一个64位的控制核心（PPE）和8个128位的运算核心（SPU）组成，外加一个VMX向量处理单元。时钟频率3.2GHz，浮点运算达到218GFLOPS。GPU是SCE与Nvidia共同开发的RSX（Reality Synthesizer）处理器，支持720p到1080p的游戏渲染，意味着电视游戏进入了高清时代。同时索尼也全面支持了法相贴图，HDR渲染和自投射阴影等技术，电视游戏的光影效果有了前所未有的提升。声音方面PS3加入最多7.1声道的杜比环绕立体声支持，可以说在当时是相当强悍的配置。论性能PS3较Xbox360略胜一筹，但是画面好并不是一切，任天堂wii的成功就说明了这个道理。&lt;/p&gt;

&lt;p&gt;Playstation 3主板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_23.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了当代，随着种类繁多的游戏的冲击，传统RPG的受众也越来越边缘化。最终幻想系列该走向何方？最终幻想13就诞生在这样一个犹豫的时期。游戏的画面和音效都达到了前所未有的高度，游戏操作界面与cg画面几乎无缝衔接，战斗流畅华丽，镜头灵活多变，少量的物理系统也被加入游戏中。同时游戏的剧情也受到了很高的评价。即便如此，较前作大幅度简化的游戏系统让一大批老玩家怨声载道。在这个生活节奏迅速加快的年代，没有多少人会静下心来研究一个跟一门学科一样复杂的游戏，最终幻想如何保持自己的风格，同时又能让更多的人接受？这个问题只能交给游戏的开发人员。&lt;/p&gt;

&lt;p&gt;最终幻想XIII游戏画面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_24.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Square Enix（SE）在PS3平台上一共推出了3部最终幻想13，系统上略有不同。与以往的一个平台三部相比，SE并没能推出更多的单机正传作品，本来确定在PS3上发售的最终幻想XIII-Versus也重新编号为15并推迟到PS4平台发售。至于最终幻想14，作为网络游戏，并没有续写11的传奇，除了音乐和CG保持了以往的水平，游戏整体彻底快餐化，失去了原有的内涵，是最终幻想正传中唯一大失水准的作品。在Metacritic网站上，与以往至少80分以上的评分不同，最终幻想14只得到了49分，根本没有及格。&lt;/p&gt;

&lt;h3&gt;六、体感＋云游戏＋即时演算－－PS4与Xbox one次世代&lt;/h3&gt;

&lt;p&gt;Xbox one与PS4在2013年几乎同时发售，“次世代”再次成为舆论的焦点。次世代主机在大幅度提升游戏画面的同时，加入了针对物理演算的硬件支持。索尼这次放下了身段，老老实实的使用主流的架构，消除了之前与微软的差距。发售之初PS4因其更高的性能，更多的玩家积累，以及更加高质量的游戏库，迅速取得了销售上得领先地位。到目前为止（2014/8/17），PS4累计销售超过1000万台，超过微软的500万台，成为销售最快的PS主机。因为最终幻想XV目前只确定PS4平台发售，所以这里只说PS4.&lt;/p&gt;

&lt;p&gt;Playstation 4主机:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_25.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS4采用SCE和AMD共同研发的四核x86-x64架构Jaguar模组CPU，GPU包括18个运算单元，浮点运算高达1.84TFLOPS。CPU与GPU全部包含在主芯片的SoC中，另外还包含内存控制器和视频编解码器等其他单元。&lt;/p&gt;

&lt;p&gt;Playstation 4主板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_26.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在E3 2013展会上，最终幻想的预告片和游戏画面首次亮相。游戏的玩法似乎更接近动作游戏，画面也更加震撼。很明显，SE想吸收更多的新玩家加入。但是在新玩法和优秀画面的掩盖下，最终幻想的内涵还能剩下多少？我们还能找回曾经的感动吗？在社会不断发展的今天，在很多不可能成为现实的今天，我们是不是已经失去了更加重要的东西呢？&lt;/p&gt;

&lt;p&gt;最终幻想XV演示画面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ffc/ffc_27.jpg&quot; alt=&quot;ffc&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;尾声&lt;/h3&gt;

&lt;p&gt;无论在什么时代，都不能完全抛开软件来评价一款硬件。对于游戏主机产业更是如此，每一部游戏都与同时代的游戏主机密不可分，永远定格在我们的记忆里。回头再看看最终幻想的第一部，才知道我们的科技到底走了多远。感谢所有为之付出努力的人们，是你们让这一切成为可能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;本文部分内容参考维基百科，图片来自互联网。其余为作者个人观点，如有谬误，欢迎指出。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;版权所有，如需转载请告知原作者并注明原帖地址。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/game/2014/08/08/ffc</link>
                <guid>http://username.github.io/game/2014/08/08/ffc</guid>
                <pubDate>2014-08-08T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>基于Mac的ffmpeg初级教程</title>
                <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;现如今的各种多媒体设备对于各种视频格式都有了非常广泛的支持，不管是IOS还是android，wp，对于各种格式的视频播放都都不在话下，至于桌面级的设备就更不用说。再加上随着网络流媒体的发展，以及某些视频解码模块在各个设备上的普及（比如H.264），现在的普通用户已经基本告别了视频格式转换这个让人头痛的问题。但是对于视频的制作者，以及视频网站的从业人员，视频转换依然是日常中的日常。而ffmpeg就是最常用的转换内核之一，它不但有着非常广泛的视频以及音频格式编码支持，丰富的自定义方式，而且甚至可以集成在网站中，对上传的视频自动处理。官方网站在这里：&lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;https://www.ffmpeg.org&lt;/a&gt;。理论上ffmpeg支持各个平台，这里只介绍ffmpeg在mac下的使用。Mac在视频转换上的专业软件相对较少，通过一个简单的教程，我们完全可以把ffmpeg当成一个好用的视频转换器来使用。&lt;/p&gt;

&lt;h2&gt;安装&lt;/h2&gt;

&lt;h3&gt;安装 Xcode Command Line Tools&lt;/h3&gt;

&lt;p&gt;1.打开终端。&lt;/p&gt;

&lt;p&gt;2.输入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.在弹出的窗口中选择安装。&lt;/p&gt;

&lt;h3&gt;准备Homebrew&lt;/h3&gt;

&lt;p&gt;我们选择使用homebrew软件包管理来安装ffmpeg。关于homebrew的安装和使用：&lt;a href=&quot;https://github.com/Homebrew/homebrew/wiki&quot;&gt;https://github.com/Homebrew/homebrew/wiki&lt;/a&gt;，简单来说，在终端输入如下代码，就OK了！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果之前已经安装了homebrew，不要忘了在安装前升级到最新版，确保源是最新的，同样在终端输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;安装ffmpeg&lt;/h3&gt;

&lt;p&gt;在终端输入如下，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待终端的安装结束，好的，现在就可以使用ffmpeg了。虽然只能在终端中通过命令使用非常不直观，但是功能实在是很强大，而且ffmpeg新版对于多核有着非常好的支持，在转换速度方面也有优势，下面就为大家简单介绍。&lt;/p&gt;

&lt;h2&gt;使用ffmpeg&lt;/h2&gt;

&lt;h3&gt;从零开始&lt;/h3&gt;

&lt;p&gt;废话不多说，先来看一条最简单的指令（以下所有代码如无特别说明均是在终端使用）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg -i input.avi output.mpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;ffmpeg&lt;/code&gt;是调用ffmpeg软件包的指令，&lt;code&gt;-i&lt;/code&gt;表示之后的文件为输入的视频文件，&lt;code&gt;input.avi&lt;/code&gt;代表输入的文件，这里可以替换成任何名称和格式视频文件，而且可以包含目录。我的诀窍是输入&lt;code&gt;-i&lt;/code&gt;之后直接将要转换的文件拖入终端，感谢Mac丰富的拖拽操作。之后为输出的文件名，可以随意命名，当然这里也是可以包含目录的，我的习惯是直接拖入目标文件夹，再在后面加上希望使用的文件名，所以可能是如下的效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg -i /Users/username/Documents/input.avi /Users/username/Desktop/video/output.mpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;幸运的是ffmpeg有非常好的自动过程，所以只是想转换格式的话，使用如上的代码便可以简单实现。当然多数时候，我们对码流，分辨率，编码器方面都有自己的要求，&lt;/p&gt;

&lt;h3&gt;进阶篇&lt;/h3&gt;

&lt;p&gt;当然ffmpeg还可以实现各种常用功能，下面用一个我比较常用的实例来说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg —i input.xxx -map 0:0 —map:0:1 -profile:v main -level 3 -x264opts ref=3:b-pyramid=none:weightp=1 -vcodec h264 -vb 640k -s 480x272 -acodec libvo_aacenc -ab 128k output.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个PSP视频转换的的实例，先不要觉得太长，一点点看的话就会发现非常简单。首先，除去第一部分介绍过的语句，仔细观察可以发现我实际上只是在input和output之间加入了一系列的指令，&lt;code&gt;-xxx&lt;/code&gt;就是我们希望改变的视频或者音频属性名称（比如码流，分辨率等），之后跟随的的便是针对这一属性所设置的参数。先来介绍最常用的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-vcodec&lt;/code&gt;表示目标文件的视频编码器（&lt;strong&gt;v&lt;/strong&gt;ideo &lt;strong&gt;codec&lt;/strong&gt;），这里我使用的是最常用的格式，也是psp要求的编码&lt;code&gt;h264&lt;/code&gt;，注意这里的&lt;code&gt;h264&lt;/code&gt;实际上是ffmpeg所使用的H.264编码器的名称。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-vb&lt;/code&gt;代表目标视频的码流（&lt;strong&gt;v&lt;/strong&gt;ideo &lt;strong&gt;b&lt;/strong&gt;itrate），这里设置为640kbits/s，因为psp分辨率很低，且机能有限，所以总的码流最好不要超过800k，再高也不会有任何实质的提升。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-s&lt;/code&gt;代表视频的分辨率（&lt;strong&gt;s&lt;/strong&gt;ize），这里设置为480x272为PSP屏幕的分辨率。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--acodec&lt;/code&gt;代表目标文件的音频编码器（&lt;strong&gt;a&lt;/strong&gt;udio &lt;strong&gt;codec&lt;/strong&gt;），因为psp视频采用的是aac编码，一次使用的编码器为&lt;code&gt;libvo_aacenc&lt;/code&gt;，同样这里只是ffmpeg内部所使用的编码器名称，与&lt;code&gt;h264&lt;/code&gt;相同。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-ab&lt;/code&gt;代表目标音频的码流（&lt;strong&gt;a&lt;/strong&gt;udio &lt;strong&gt;b&lt;/strong&gt;itrate），这里使用128k，可以满足一般要求。&lt;/p&gt;

&lt;p&gt;对于不同的使用要求，在相同的位置增减相关的属性即可，比如你不想改变视频的分辨率，只要不添加&lt;code&gt;-s&lt;/code&gt;这一项即可。&lt;/p&gt;

&lt;p&gt;当然，你一定会问剩下还有许多代码是什么意思，这里简单说一下：&lt;/p&gt;

&lt;p&gt;首先，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-profile:v main -level 3 -x264opts ref=3:b-pyramid=none:weightp=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一部分为PSP对于视频的特殊要求，不是针对PSP的可以忽略，使用PSP的请务必加上，具体可以自己研究，毕竟这只是个初级教程。另外，&lt;code&gt;-map 0:0 —map:0:1&lt;/code&gt;这里的意思是选定视频的视频流和音频流，当然默认就是这两个流，可以忽视不写。但是，对于使用某些多流封装的视频，比如&lt;code&gt;mkv&lt;/code&gt;，会包括多个音频流，或者字幕流，这里就需要选择了。具体的话就自己找找高级的教程吧。&lt;/p&gt;

&lt;h3&gt;高级使用？&lt;/h3&gt;

&lt;p&gt;到这里，我相信已经可以满足大部分普通用户的转码需求。其他格式的编码解码器名称可以通过&lt;code&gt;ffmpeg -formats&lt;/code&gt;命令查看，其他的指令也可以通过&lt;code&gt;ffmpeg -h&lt;/code&gt;查看。除了以上的简单功能，ffmpeg还可以为视频添加字幕，同时生成多个不同格式的目标文件，对视频添加或者去掉黑边，添加水印等。当然，使用ffmpeg脚本来添加UI来制作自己的转码工具，或者将它嵌入自己的网站也未尝不可。这些高级功能就靠大家自己摸索了。最后推荐一个非常好的初学者教程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://linuxers.org/tutorial/ffmpeg-tutorial-beginners&quot;&gt;http://linuxers.org/tutorial/ffmpeg-tutorial-beginners&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;非常感谢这个教程的作者，同时也感谢看到这里的读者，谢谢支持！&lt;/p&gt;
</description>
                <link>http://username.github.io/lessons/2014/08/02/ffmpeg</link>
                <guid>http://username.github.io/lessons/2014/08/02/ffmpeg</guid>
                <pubDate>2014-08-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Mac OS X Yosemite Beta与Mavericks双启动安装</title>
                <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;难得苹果的新系统开放测试，我想每个Mac用户都不想错过这个机会，谁不想第一时间体验一下焕然一新的新系统呢？于是我早早就在苹果官网登记了账户。今天一早翻翻邮箱，终于等来了苹果的邮件，Yosemite Beta终于开始推送了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_1.png&quot; alt=&quot;yosemite_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;抑制不住激动的心情，但是转念一想这只是beta版本，在使用中不可避免会有各种各样的问题。在网上随便一搜，发现许多不明真相的群众已经中招了，想要退回老版本当然也是非常麻烦。所以，思前想后决定做成双启动，将beta 版安装在其他分区。&lt;/p&gt;

&lt;h2&gt;安装&lt;/h2&gt;

&lt;h3&gt;1.安装要求&lt;/h3&gt;

&lt;p&gt;打开邮件提供的链接，安装的要求很简单，只要满足如下三点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;已安装OS X Mavericks 10.9 或更高版本系统&lt;/li&gt;
&lt;li&gt;至少2GB内存&lt;/li&gt;
&lt;li&gt;至少8GB的硬盘空闲空间&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当然对于新电脑这些都不是问题。老电脑的话最好确认一下Mac的信息：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;点击左上角&lt;strong&gt;苹果图标&lt;/strong&gt; &gt; 点击&lt;strong&gt;关于本机&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;2.备份重要数据&lt;/h3&gt;

&lt;p&gt;安装前重要的数据还是要备份一下，可以选择使用Time Machine最好不过。当然这里我要装在第二分区，所以我就不管这么多了。&lt;/p&gt;

&lt;h3&gt;3.下载&lt;/h3&gt;

&lt;p&gt;邮箱提供的链接会给出下载链接以及参加Beta的Redemption Code。点击下载之后会弹出app store，之后所有的下载过程都是自动的，稍等片刻。下载好之后，在应用程序的界面会出现如下图标：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_2.png&quot; alt=&quot;yosemite_2&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;4.准备安装分区&lt;/h3&gt;

&lt;p&gt;安装过程会在下载结束后自动开始，我不想覆盖掉自己的系统，所以就没立刻开始，先准备另一个分区。（本来应该开始前就准备，我忘了。。。）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在应用程序界面，点开 &lt;em&gt;其他&lt;/em&gt;，在选择 &lt;em&gt;磁盘工具&lt;/em&gt;，就是这个图标：
&lt;img src=&quot;/images/yosemite/yosemite_3.png&quot; alt=&quot;yosemite_3&quot; /&gt;&lt;/li&gt;
&lt;li&gt;打开之后先在左边选中自己的硬盘，然后在右边选择 &lt;em&gt;分区&lt;/em&gt;，出现如下界面：
&lt;img src=&quot;/images/yosemite/yosemite_4.png&quot; alt=&quot;yosemite_4&quot; /&gt;&lt;/li&gt;
&lt;li&gt;点击界面左下的 &lt;em&gt;＋&lt;/em&gt; 来添加新的分区吧，这里我分了40GB，至少8GB。&lt;strong&gt;&lt;em&gt;重要：如果使用Bootcamp安装了Windows分区，这个方法可能会对windoes分区的引导造成问题。&lt;/em&gt;&lt;/strong&gt;虽然我没有尝试，但是有网友反映windows无法引导，所以三思而行。当然，安装之后Mac的双启动不会有任何问题，苹果在这些细节的方面总是很贴心，不会像以前Windows那样出现各种问题，虽然最近几年windows采用EFI引导之后有很大改观（貌似跑偏了。。。）&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;5.安装&lt;/h3&gt;

&lt;p&gt;终于可以开始安装系统了，点击应用程序里下载之后新出现的图标，安装过程会开始，跟随着只是一直下一步吧。&lt;strong&gt;&lt;em&gt;注意选择安装分区的时候新的分区默认是不显示的&lt;/em&gt;&lt;/strong&gt;。点击磁盘图标下面的&lt;em&gt;显示所有磁盘&lt;/em&gt;，就能在磁盘之间选择：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_5.png&quot; alt=&quot;yosemite_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择安装，然后屏幕一黑，安装就开始了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_6.jpg&quot; alt=&quot;yosemite_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装好之后进入新的系统，如初始系统一样选择地区，Apple ID等，但是对于新的系统，当然会有不一样的地方。由于最着新的系统升级，iCloud也会有巨大的变化，开放了文件系统，涉及到apple服务器端的服务升级，因此安装程序会提问是否将iCloud升级到新版，&lt;strong&gt;&lt;em&gt;由于新的iCloud依赖IOS8和Yosemite，所以升级会导致IOS7或者其他老系统的部分新内容无法被同步&lt;/em&gt;&lt;/strong&gt;。如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_7.jpg&quot; alt=&quot;yosemite_7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我斟酌了一下，还是升级吧，因为没有iphone，iCloud也不是我使用的主要的云服务。这里选择升级的话会在建立iCloud账户的部分等待很久，估计需要改变的地方很多，可见iCloud这次也是大换血。&lt;/p&gt;

&lt;p&gt;之后就可以看到新系统清爽的界面了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/yosemite/yosemite_8.jpg&quot; alt=&quot;yosemite_8&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;6.第一印象&lt;/h3&gt;

&lt;p&gt;第一印象当然就是简洁。Yosemite可以说搭上了偏平化简洁风的末班车。之前虽然Mac在系统安全性，稳定性较windows 8都有一定的优势，但如果同时用两个系统的话，会明显感觉win8更清爽，画面中有效信息能使用的范围明显较大，而Mavericks比较起来就会显得比较繁杂，尽管有优秀的手势操作支持，打开很多窗口的话依然会感觉界面很混乱。这种情况在Yosemite中有了明显的改观。Dock的新图标设计保持了一贯的高水准，之前对于dock的担心也完全多余，即使安装一些老程序，依然不会显得突兀。&lt;/p&gt;

&lt;p&gt;有了新系统，当然要在里面肆虐一番。我会从普通用户的角度来体验Yosemite，关于新系统的细节，以及beta版发现的问题，请关注后续文章，&lt;/p&gt;
</description>
                <link>http://username.github.io/test/2014/07/24/yosemite-beta%EF%BC%8D1</link>
                <guid>http://username.github.io/test/2014/07/24/yosemite-beta－1</guid>
                <pubDate>2014-07-24T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>DCT Implementation based on Algorithmic Strength Reduction and binDCT Algorithm</title>
                <description>&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;p&gt;This paper introduces FPGA implementations of Discrete Cosine Transform (DCT) depending on Algorithm Strength Reduction and binDCT algorithm. DCT is a frequent use calculation for telecommunication and image processing. Therefore, a fast and low resource usage hardware implementation of DCT is highly demanded. In this report, specifically, an 8-input-8-output DCT module will be sketched using both Algorithm Strength Reduction and binDCT, which are all algorithms to gain low cost and high efficiency design of DCT. The function correctness of both designs will be test and a comparison between them will be made in terms of both scale and timing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; FPGA, DCT, Algorithm Strength Reduction, binDCT&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/DCT_Implementation.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/fpga/2014/05/07/work9</link>
                <guid>http://username.github.io/fpga/2014/05/07/work9</guid>
                <pubDate>2014-05-07T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>FPGA Design and Implementation of Linear Scan Conversion and Rasterization</title>
                <description>&lt;h2&gt;Abstraction&lt;/h2&gt;

&lt;p&gt;This paper provides an FPGA solution on line segment rasterization which separate the whole process into two modules: initial module and Bresenham module, after a deep analysis on Bresenham Algorithm. This design can be adjusted to the pipeline structure of graphic processing perfectly through which the position and parameter of every pixel can be generated by the graphic information about the vertex of the line segment. The key points of this project lie on the problem of changing the algorithm of Bresenham, initialization, interpolation into the hardware description and founding the test platform both in software and hardware scale. The features of the circuit include: get the parameters of positions and RGB from the upper circuit, save all the information, initial the line plotter through the pipeline calculate, output the raster data in series; support the pipeline structure, receive and send data through handshake protocol. The subject adopts Cyclone II series of Altera development board as hardware devices, use Verilog code drive the model to achieve the function of rasterization, use the Modelsim and Quartus II simulation software bring about the circuit simulation and verification and indicate whether the design circuits meet the requirements of line segment rasterization function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Words&lt;/strong&gt;: Line Segment Rasterization, Bresenham, Pipeline&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/FPGA%20Design%20and%20Implementation%20of%20Linear%20Scan%20Conversion%20and%20Rasterization.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/fpga/2014/04/24/work9</link>
                <guid>http://username.github.io/fpga/2014/04/24/work9</guid>
                <pubDate>2014-04-24T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>[Self-made]虫师－吸露之群(Mushishi--Tsuyu wo suu mure)</title>
                <description>

&lt;div&gt;&lt;object id=&quot;ssss&quot; width=&quot;480&quot; height=&quot;370&quot; &gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;embed pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=225285919_1887411752/s.swf&quot; type=&quot;application/x-shockwave-flash&quot; name=&quot;ssss&quot; allowFullScreen=&quot;true&quot; allowScriptAccess=&quot;always&quot; width=&quot;480&quot; height=&quot;370&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;


&lt;p&gt;Youtube: &lt;a href=&quot;https://www.youtube.com/watch?v=LKf7GE1SAno&quot;&gt;https://www.youtube.com/watch?v=LKf7GE1SAno&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自己试着上传了一个视频，算是对自己学习钢琴两年的回报吧。制作的过程中也学到了很多新东西，比如视频音频的剪辑合成，音轨制作，视频压缩上传，算是收获不小。有时间可能会在这里再写一篇教程之类的。&lt;/p&gt;

&lt;p&gt;希望把这首歌献给所有喜欢音乐，喜欢动漫的小伙伴们。也献给人生十字路口的自己，不念过去，不畏将来。&lt;/p&gt;
</description>
                <link>http://username.github.io/music/2014/04/22/mushishi</link>
                <guid>http://username.github.io/music/2014/04/22/mushishi</guid>
                <pubDate>2014-04-22T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>NoC Implementation of Butterfly Fourier Algorithm</title>
                <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this project, a Butterfly Fourier Algorithm is implemented in to 3*3 NoC structure.&lt;/p&gt;

&lt;p&gt;The challenge of this project focuses on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extend the origin design into a 3*3 NoC network.&lt;/li&gt;
&lt;li&gt;Map all 14 the processes into 9 PE in total.&lt;/li&gt;
&lt;li&gt;Evaluate the performance of the newly built system.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To solve these problems, methods below are used correspondingly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the module declaration and change the connection in top.cpp. Add y axis function to router.cpp.&lt;/li&gt;
&lt;li&gt;Merge some of the functions of processes into one PE. Let the functions be determined by the coordinate of current PE and the source location of current.&lt;/li&gt;
&lt;li&gt;Add counters to all the output queue to judge whether there is a stuck or not and decide the fastest rate of this system depending on the evaluate result.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All implementation details will be served in part 3...&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/NoC%20Implementation%20of%20Butterfly%20Fourier%20Algorithm.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/noc/2014/01/21/work8</link>
                <guid>http://username.github.io/noc/2014/01/21/work8</guid>
                <pubDate>2014-01-21T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Design and test of a basic audio amplifier</title>
                <description>&lt;h2&gt;Final Schematic, Labels and Parameter definition:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/ece425.jpg&quot; alt=&quot;audioamp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sketch and analysis using OrCAD Capture CIS Lite and Pspice.&lt;/p&gt;

&lt;p&gt;There are few points that have to be clarified first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;250 Ohm is a normal resistance value for a high quality monitor level headphone.&lt;/li&gt;
&lt;li&gt;The parameters of the voltage source at the input point are not certain values, may be changed during analysis.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More details will be given in part 2...&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Design%20and%20test%20of%20a%20basic%20audio%20amplifier.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/analog/2014/01/21/work7</link>
                <guid>http://username.github.io/analog/2014/01/21/work7</guid>
                <pubDate>2014-01-21T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Optimization of a motion estimate algorithm for video coding</title>
                <description>&lt;h2&gt;Abstraction&lt;/h2&gt;

&lt;p&gt;This design mainly describes an optimization procedure of a video coding algorithm depending on linear system theory. After deeply analyzing this system, I apply a digital linear optimization to make this system more stable and with less noise effects.&lt;/p&gt;

&lt;h2&gt;Algorithm Introduction&lt;/h2&gt;

&lt;p&gt;Video coding is a technology that is useful in video compression, which will highly improve the efficiency of video transmission and storage. As described in [1], an important method for video coding called motion compensation plays a key role in improving coding efficiency. The main idea of video compression to achieve compression is to remove spatial and temporal redundancies existing in video sequences [1]. In order to achieve this, firstly we have to detect the motion vector (MV) between the reference frame and current frame. Then, the motion estimation will be generate during the frame scan...&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--A%20motion%20estimate%20algorithm%20for%20video%20coding.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/system/2014/01/21/work6</link>
                <guid>http://username.github.io/system/2014/01/21/work6</guid>
                <pubDate>2014-01-21T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Carry Ripple Adder Implementation using Data Driven Dynamic Logic</title>
                <description>&lt;h2&gt;Abstraction&lt;/h2&gt;

&lt;p&gt;This paper provides some implementation examples of a 4-bit carry ripple adder (CRA) depending on Data-Driven Dynamic logic based structures. In this design, the 4-bit CRA is designed depend on two different logic expressions and based on two techniques: D3L and SPD3L respectively. Then, by comparing the performance of these four designs, a best design can be choose from them. Moreover, a discussion about the differences between these two techniques will be provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; D3L, SPD3L, 4-bit CRA&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the fast development of integrated circuit technology, we concentrate our researches increasingly on increasing speed and reducing power dissipation when implementing specific logic functions. One well-known method is Domino dynamic logic, which makes a circuit much faster than conventional logic. However, it comes with large dynamic power consumption. In this paper, I am going to use two new techniques: D3L [1] and SPD3L [2]. The basic thought of D3L is using a combination of inputs as the dynamic signal which will not affect the logic accuracy of the whole circuit and make the design work as it is in dynamic logic. However, it makes the capacitance for charge much larger and reduces the speed of a circuit. As a result, we involve SPD3L, in which D3L are separated into difference part to reduce the charging capacitance. The description in detail will be provided in next part...&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--Carry%20Ripple%20Adder%20Implementation%20using%20Data%20Driven%20Dynamic%20Logic.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/vlsi/2014/01/21/work5</link>
                <guid>http://username.github.io/vlsi/2014/01/21/work5</guid>
                <pubDate>2014-01-21T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Design and Synthesis of Multi-Operand Adders</title>
                <description>&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;p&gt;This paper provides some implementation examples  of multi-operand adder depending on different structures. More specifically, I design an 8 operands adder with four bits for each operand on three different structures separately: Linear structure of carry propagation adder, linear model of carry save adder and tree structure multi operand adder depending on [4:2] adder. Moreover, a bonus work of a 10 4-bit operands adder is also described in this paper with the use of [5:0] adder and tree structure.&lt;/p&gt;

&lt;p&gt;Addition to the implementation of adder, this project also provides the result of simulation, synthesis and place and route with reports of timing efficiency, power consumption and area usage for each level of all the designs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; Multi-operand, Adder&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--Design%20and%20Synthesis%20of%20Multi-Operand%20Adders.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/vlsi/2014/01/21/work4</link>
                <guid>http://username.github.io/vlsi/2014/01/21/work4</guid>
                <pubDate>2014-01-21T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Reciprocal, Division and Square Root Algorithms and Implementation</title>
                <description>&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;p&gt;This paper provides an overview on digital arithmetic algorithms for reciprocal, division and square root operations which have been widely used in contemporary VLSI architectures. Moreover, some implementation examples of these algorithms will also be provided and shortly described in this paper as well as some algorithm improvements that are made to speed up specific applications and make it easier to adjust to a new structure.&lt;/p&gt;

&lt;p&gt;The algorithms that will be introduced in this article include: SRT algorithm, Newton-Raphson(NR) Iteration and Goldschmidt method for division and square root and NR algorithm for reciprocal calculation.&lt;/p&gt;

&lt;p&gt;Meanwhile, the implementations for SRT and NR method will be provided as instances for these algorithms in actual usage. Then, the speed up method for Goldschmidt algorithm will be served as an example of algorithm optimization.&lt;/p&gt;

&lt;p&gt;In addition to the introduction of algorithms and implementations, and purpose of this paper also focuses on the thought of improvement when we make a design depending on these algorithms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; reciprocal, division, square root, SRT, Newton-Raphson, Goldschmidt.&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--Reciprocal,%20Division%20and%20Square%20Root%20Algorithms%20and%20Implementation.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/algorithm/2014/01/20/work3</link>
                <guid>http://username.github.io/algorithm/2014/01/20/work3</guid>
                <pubDate>2014-01-20T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Bowling score keeper design </title>
                <description>&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;p&gt;This paper provides an FPGA solution to a bowling score keeper. Specifically,
this design achieves the functions of receiving the score of every throw in a
bowling game, judging the performance, deciding the total score at any time
depending on the bowling game rules and displaying the score on an LED screen.
The key points of this project lie on changing the bowling score counting method
to hardware description, which can be complicated as there are many branches in
every state according to different conditions.&lt;/p&gt;

&lt;p&gt;Features of this design include: get the score in at every throw, save it to judge the performance and implement
the score calculation method depending on state machine structure.&lt;/p&gt;

&lt;p&gt;The design is built on the Spartan 6 development board as hardware platform, described
through VHDL code and been tested in Modelsim simulation platform. Moreover,
synthesis, place and route process is accomplished on ISE platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key words:&lt;/strong&gt; Bowling score keeper, state machine&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--Bowling%20score%20keeper%20design.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/soc/2014/01/20/work2</link>
                <guid>http://username.github.io/soc/2014/01/20/work2</guid>
                <pubDate>2014-01-20T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Configurable processors: a new method for SoC design </title>
                <description>&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;p&gt;This paper provides an introduction on a latest SoC design method: configurable processor,
which has been widely used for the sake of its lower cost, lower power consumption, higher
efficiency for ASIC or Embedded system design and better performance in many practical application
aspects such as video decoders and DSP. To make the overview more clear, we take Xtensa architecture
IP core as an example to describe what a configurable processor structure is like and how it help
designers to simplify the design flow and get approach to an even better function than before.
Xtensa is made by Tensilica and it is one of the most popular configurable processor cores around
the world. Xtensa architecture provides a brand new design technology for both hardware and software
designers and it is so convenient that it leads to a great impact on SoC design since 1999 when it is
firstly built.&lt;/p&gt;

&lt;p&gt;This paper will give answers to the questions below by providing details about Xtensa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is configurable processor.&lt;/li&gt;
&lt;li&gt;What can a configurable processor do.&lt;/li&gt;
&lt;li&gt;Why we need configurable processor in our design.&lt;/li&gt;
&lt;li&gt;How it can improve the performance of our design.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; Configurable, Processor, Xtensa&lt;/p&gt;

&lt;p&gt;For full PDF: &lt;a href=&quot;/assets/Qiao%20Gao--Configurable%20processors.pdf&quot;&gt;&lt;img src=&quot;/images/file_pdf.png&quot; alt=&quot;pdf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/soc/2014/01/20/work1</link>
                <guid>http://username.github.io/soc/2014/01/20/work1</guid>
                <pubDate>2014-01-20T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>如何使用Jekyll及Github搭建自己的个人博客</title>
                <description>&lt;p&gt;这是一个搭建个人博客的教程。虽然提供个人博客的网站多如牛毛，但是作为技术党，拥有一个自己完全掌控的个人博客，完全告别不喜欢的广告，既能方便的的发布文章，又能随心所欲的装扮自己的网站，何乐而不为。这就是为什么使用Jekyll和Github的原因。&lt;/p&gt;

&lt;h2&gt;为什么写这篇文章&lt;/h2&gt;

&lt;p&gt;有心的朋友一定会像我开始之初，查找大量网上的资料。但是网上的资料水平良莠不齐，而且日期不统一，有些当初适用的方法已经过时。本人经过各种尝试，走了不少弯路，因此希望通过这篇文章，整合所有方法的原发布地址，以及各种教程，以提供更全面的搭建博客的方案。&lt;/p&gt;

&lt;h2&gt;想要开设新网站，我们需要：&lt;/h2&gt;

&lt;p&gt;服务器：网站的内容都要放到服务器上，这样你的网站别人随时都能看到。当然也可以用自己的电脑搭建服务器，但是这个方法对一般用户并不适用，在此不做赘述。服务器需要一些有实力的公司为你提供空间，根据速度和稳定性不同服务器提供商会收费，不过这里我们的服务器就是github pages，github提供的免费网站服务，当然同时我们还能享受git版本发布平台提供的各种便利。&lt;/p&gt;

&lt;p&gt;域名：就是网站的网址。这个网址需要从域名申请网站处获得。收费的比较有名的是Godaddy，免费的“.tp”。这类网站可以在google很容易搜索到，申请域名的教程网络上也有很多，过程并不复杂，想要拥有属于自己的漂亮的网址，没有耐心可不行。这里以Godaddy为例。&lt;/p&gt;

&lt;p&gt;编程：做网站少不了编写代码，但是只是个人博客，对代码的要求并不高，而且我们可以修改网上的开源模版，如：Jekyll Bootstrap。需要的基本语言是HTML和CSS，当然我们也可以用javascript为网站添加更多功能。&lt;/p&gt;

&lt;p&gt;Jekyll: 这是一个开源的博客发布平台，通过这个平台，我们不仅可以快捷的发布自己的博客，而且通过使用liquid模版语言方便的编写模版代码。具体在介绍步骤的时候会一一说明。&lt;/p&gt;

&lt;h2&gt;步骤&lt;/h2&gt;

&lt;h3&gt;1.Github pages&lt;/h3&gt;

&lt;p&gt;这是我们的所要用到的服务器，它是完全免费的，可以放心使用。看向这个地址（&lt;a href=&quot;https://pages.github.com&quot;&gt;https://pages.github.com&lt;/a&gt;）。请务必优先参考这里的步骤。在github上注册一个新的repository，注意务必将这个repository命名为username.github.io,&quot;username&quot;为你注册github的用户名。注册好之后服务器就完成啦。其实这个repository的名称就可以直接拿来当域名使用，但是显然我们需要更个性化的域名。之后我们只需要上传文件到这个服务器，我们使用git发布我们的页面。对git熟悉的人自然不用多说，不熟悉的建议就用github的windows桌面应用（&lt;a href=&quot;https://windows.github.com&quot;&gt;https://windows.github.com&lt;/a&gt;）。建议还是熟悉一下git再回来看这个教程。关于git（&lt;a href=&quot;http://zh.wikipedia.org/wiki/Git&quot;&gt;http://zh.wikipedia.org/wiki/Git&lt;/a&gt;）。教程在这里（&lt;a href=&quot;http://git-scm.com/doc&quot;&gt;http://git-scm.com/doc&lt;/a&gt;）。&lt;/p&gt;

&lt;h3&gt;2.域名申请&lt;/h3&gt;

&lt;p&gt;这里使用Godaddy网站作为例子，其他域名申请网站都大同小异。这里需要明确，用户与域名的租赁关系并不依赖域名网站，因此你完全可以把域名挂靠在其他网站管理。好了，直接进入Godaddy的主页（&lt;a href=&quot;https://www.godaddy.com&quot;&gt;https://www.godaddy.com&lt;/a&gt;），如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_1.png&quot; alt=&quot;godaddy_png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不用管上图以外的其他部分，那些是godaddy的“广告”。这里我们只需要域名。像在电商买东西一样，先注册一个账号，然后直接在搜索栏输入想要的域名，所有可用的域名会被列出。选中想要的域名加入购物车，然后选择租赁时长，付款，总之跟着网站的提示一步一步来就好。拿到域名之后，最重要的一步就是把域名和我们的Github连接起来。&lt;/p&gt;

&lt;h3&gt;3.域名连接&lt;/h3&gt;

&lt;p&gt;首先戳这个（&lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages&quot;&gt;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages&lt;/a&gt;）。这里有一个选择，如果你想要你的域名为主域名的格式（example.com），看这里（&lt;a href=&quot;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider&quot;&gt;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider&lt;/a&gt;）。如果想要使用次级域名（www.example.com），看这里（&lt;a href=&quot;https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider&quot;&gt;https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider&lt;/a&gt;）。简单来说，不管我们上传什么文件到服务器，我们必须在根目录放置一个CNAME文本文件，里面只要注明我们想用的域名即可。下图是我的CNAME，怎么样，够简单吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_2.png&quot; alt=&quot;godaddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后我们需要设定域名的解析，也就是DNS了。这个步骤我们需要在Godaddy的网站完成。再次打开&lt;a href=&quot;http://www.godaddy.com&quot;&gt;Godaddy&lt;/a&gt;，右上登录。然后在如下位置选择&lt;code&gt;launch&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_3.png&quot; alt=&quot;godaddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后猛戳自己的域名：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_4.png&quot; alt=&quot;godaddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在之后的页面中选择&lt;code&gt;DNS Zone File&lt;/code&gt;选项卡，然后在&lt;code&gt;A(Host)&lt;/code&gt;下修改指向：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_5.png&quot; alt=&quot;godaddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的IP可以就用这个，当然，以github提供的为主，最新的IP请在上方主域名设置方法的链接寻找。这里我要使用www的次级域名，所以不要忘了在CName (Alias)下修改www的指向：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/jekyll_6.png&quot; alt=&quot;godaddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后不要忘记保存。大功告成！当然一般也不会立即生效，等几个小时再试试吧。连接成功后即使服务器上什么也没有也会有明显的区别，不会连接到Godaddy的广告了（这网站广告真多（╯‵□′）╯︵┴─┴ ）。&lt;/p&gt;

&lt;p&gt;到此为止我们已经在互联网拥有自己的天地了，然而，为了舒服的写博客，编网站，我们还需要Jekyll的帮忙。&lt;/p&gt;

&lt;h3&gt;4.Jekyll&lt;/h3&gt;

&lt;p&gt;关于Jekyll，网络上的教程几乎是最全的。先看这里：（&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;https://help.github.com/articles/using-jekyll-with-pages&lt;/a&gt;）。由于Github pages内置了jekyll解析，所以我们可以直接发布编写好的的模版代码，免去了发布上传的麻烦，同时jekyll还方便我们在本地提前预览网站的效果。Jekyll官网拥有最全的安装和使用文档（&lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;http://jekyllrb.com/docs/home/&lt;/a&gt;），老老实实的看完吧。&lt;/p&gt;

&lt;p&gt;关于本地安装jekyll，我想多说两句。由于它是基于linux开发的，所以要在windows下使用会非常麻烦。如果想强行在windows下使用，请看这里：&lt;a href=&quot;http://www.madhur.co.in/blog/2013/07/20/buildportablejekyll.html&quot;&gt;http://www.madhur.co.in/blog/2013/07/20/buildportablejekyll.html&lt;/a&gt;。感谢这位作者提供了所有jekyll所需的软件包。如果为了在win的CMD下使用，我们还需要设置环境变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SET PATH=%PATH%;C:\ruby\bin;C:\devkit\bin;C:\git\bin;C:\Python\App;C:\devkit\mingw\bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把这里的c盘改成软件包解压后所在的目录即可。&lt;/p&gt;

&lt;p&gt;当然，在linux下或者mac下使用终端还是最方便的办法，但是考虑到linux系统日常使用会带来诸多不便，因此有条件的技术党还是用mac吧，在撰写博客的时候有更多简洁清爽的软件可供选择。&lt;/p&gt;

&lt;p&gt;关于liquid，其实就是jekyll所使用的模版语言。它可以与html无缝对接，对于自动生成文章分类索引等非常有帮助。jekyll对于liquid的简单介绍看这里：&lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;http://jekyllrb.com/docs/templates/&lt;/a&gt;。liquid的详细教程在这里：&lt;a href=&quot;http://docs.shopify.com/themes/liquid-documentation/basics&quot;&gt;http://docs.shopify.com/themes/liquid-documentation/basics&lt;/a&gt;。当然多读读别人的代码还是最方便的方法，这里提供可供免费下载的jekyll主题：&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;http://jekyllthemes.org&lt;/a&gt;。赶紧下载下来上传到自己的github上面看看效果吧！虽然Jekyll给我们提供了很方便的编写网站和发布的方式，但是一点点建立自己的网站还是太费心费力，我们可以直接在这些主题上进行修改，更快的制作出自己的网站。&lt;/p&gt;

&lt;h3&gt;5.Jekyll Bootstrap&lt;/h3&gt;

&lt;p&gt;觉得还是太麻烦？用这个吧！网站：&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&lt;/a&gt;。这里有详细的使用方法。这也是最快的能让你能够看到网站效果，甚至直接开始使用博客的方法。自带的主题在这里：&lt;a href=&quot;http://themes.jekyllbootstrap.com&quot;&gt;http://themes.jekyllbootstrap.com&lt;/a&gt;。可以随时切换，虽然网站有提供主题的Api，但是网络上现成的基于这个平台的主题寥寥无几。使用Jekyll Bootstrap可以使发布文章，建立网页一蹴而就。它实质上是基于rake脚本的一个程序，让你通过一句代码就能对jekyll的多个地方同时操作。当然它也是可以自定义的！我们一样可以从底层修改网页（废话），同时我们也可以对rake脚本进行修改，加入我们想要的功能。网站根目录下有一个&lt;code&gt;Rakefile&lt;/code&gt;，使用文本编辑器打开，代码也是非常简单明了，非常便于修改。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;什么？这就完了？是的，如果真的认真浏览了以上的链接，我想现在你一定已经有了自己的想法了。建立个人网站本身并没有捷径，当然如果觉得麻烦，可以选择&lt;a href=&quot;http://www.wix.com&quot;&gt;Wix&lt;/a&gt;这一类个人网站业务提供商。但是如果真的感兴趣，并认真去研究，我想你一定会发现一个不同的世界。我在这里主要是抛砖引玉，省去搜索资料的时间，提供的链接也尽量保持最新的原版资料，为大家检索使用。最后，对读到这里的人表示由衷感谢！&lt;/p&gt;
</description>
                <link>http://username.github.io/lessons/2014/01/10/jekyll-github</link>
                <guid>http://username.github.io/lessons/2014/01/10/jekyll-github</guid>
                <pubDate>2014-01-10T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&#39;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;h3&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &quot;a simple, blog aware, static site generator&quot;.&lt;/p&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
&lt;li&gt;No internet connection required.&lt;/li&gt;
&lt;li&gt;Ability to publish via git.&lt;/li&gt;
&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&#39;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &quot;objects&quot; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&#39;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &quot;set&quot;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &quot;lessons/beginner&quot;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&#39;t find &quot;lessons&quot; and &quot;beginner&quot; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&#39;s or post&#39;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&#39;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;p&gt;  &lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &quot;root&quot; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&#39;t do jackshit in liquid that hasn&#39;t been allowed explicitly by the implementation.
What&#39;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&#39;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&#39;s really unnecessary
&lt;em&gt;from a programmer&#39;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&#39;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&#39;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&#39;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&#39;s job is to generate a static representation of your website.
The following is an outline of how that&#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
At this stage your site is one big computed ruby object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &quot;liquified&quot;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &quot;rendered&quot;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&#39;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&#39;d like.&lt;/p&gt;
</description>
                <link>http://username.github.io/core-samples/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://username.github.io/core-samples/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-06:00</pubDate>
        </item>


</channel>
</rss>
